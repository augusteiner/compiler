%{
#include "kaleidoscope.yy.hpp" // automatically generated by bison
#include "driver.hpp"

#undef yywrap
#define yywrap() 1

static yy::location loc;
%}

/*
%option noyywrap nounput batch debug noinput
*/
%option noyywrap nounput batch noinput

IDENTIFIER [a-zA-Z][a-zA-Z_0-9]*
BLANK [ \t]
NUMBER [0-9]*\.?[0-9]*

%{
  // code run each time a pattern is matched
#define YY_USER_ACTION loc.columns(yyleng);
%}
%%
%{
  // code run each time yylex is called
  loc.step();
%}

{BLANK}+ loc.step();

[\n]+    loc.lines(yyleng); loc.step();

"def"    return yy::parser::make_DEF(loc);
"extern" return yy::parser::make_EXTERN(loc);

{IDENTIFIER}    return yy::parser::make_IDENTIFIER(yytext, loc);
{NUMBER}        return yy::parser::make_NUMBER(std::atof(yytext), loc);

"("     return yy::parser::make_LPAREN(loc);
")"     return yy::parser::make_RPAREN(loc);
"+"     return yy::parser::make_PLUS(loc);
"-"     return yy::parser::make_MINUS(loc);
"*"     return yy::parser::make_MULTIPLIES(loc);
"/"     return yy::parser::make_DIVIDES(loc);
";"     return yy::parser::make_SEMICOLON(loc);
<<EOF>> return yy::parser::make_END(loc);
%%

void driver::scan_begin()
{
  if(filename.empty() || filename == "-")
  {
    yyin = stdin;
  }
  else if(!(yyin = fopen(filename.c_str (), "r")))
  {
    error("cannot open " + filename + ": " + strerror(errno));
    exit(EXIT_FAILURE);
  }
}
     
void driver::scan_end()
{
  fclose(yyin);
}

